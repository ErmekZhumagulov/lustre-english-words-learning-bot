import telebot
from telebot import types
import logging
import sqlite3
from datetime import datetime, timedelta
from apscheduler.schedulers.background import BackgroundScheduler
from pytz import timezone

BOT_TOKEN = "8397688765:AAGqeVGhMoBkYyTtTLzRb1hpgUeYaejU9B8"
DB_PATH = "words.db"

# === –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–≤ –º–∏–Ω—É—Ç–∞—Ö) ===
REMINDER_INTERVALS = [
    1, 5, 20, 60, 180, 360, 720, 1440, 4320, 10080, 20160, 43200, 129600, 259200, 518400
]

scheduler = BackgroundScheduler(timezone=timezone("Asia/Bishkek"))
scheduler.start()


def init_db():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS words (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            english TEXT NOT NULL,
            russian TEXT NOT NULL,
            created_at TIMESTAMP NOT NULL
        )
    """)
    conn.commit()
    conn.close()


def add_word_to_db(user_id, english, russian):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("""
        INSERT INTO words (user_id, english, russian, created_at)
        VALUES (?, ?, ?, ?)
    """, (user_id, english, russian, datetime.utcnow()))
    conn.commit()
    conn.close()


def get_words_from_db(user_id):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("""
        SELECT english, russian FROM words WHERE user_id = ?
    """, (user_id,))
    rows = cur.fetchall()
    conn.close()
    return rows


def schedule_reminders(bot, user_id, english, russian):
    now = datetime.now(timezone("Asia/Bishkek"))
    for minutes in REMINDER_INTERVALS:
        remind_time = now + timedelta(minutes=minutes)
        scheduler.add_job(
            send_reminder,
            'date',
            run_date=remind_time,
            args=[bot, user_id, english, russian, minutes],
            id=f"{user_id}_{english}_{minutes}",
            misfire_grace_time=300  # 5 –º–∏–Ω—É—Ç –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –æ–ø–æ–∑–¥–∞–Ω–∏—è
        )


def send_reminder(bot, user_id, english, russian, minutes):
    bot.send_message(
        user_id,
        f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ({minutes} –º–∏–Ω):\n{english} ‚Äî {russian}"
    )


def main():
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger(__name__)

    bot = telebot.TeleBot(BOT_TOKEN)
    user_temp_data = {}

    def main_menu():
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ")
        btn2 = types.KeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤")
        btn3 = types.KeyboardButton("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å")
        btn4 = types.KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")
        markup.add(btn1, btn2)
        markup.add(btn3, btn4)
        return markup

    def confirmation_markup():
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(types.KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"), types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"))
        return markup

    @bot.message_handler(commands=["start"])
    def start(message):
        bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ.",
                         reply_markup=main_menu())

    @bot.message_handler(commands=["cancel"])
    def cancel(message):
        if message.chat.id in user_temp_data:
            user_temp_data.pop(message.chat.id)
            bot.send_message(message.chat.id, "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu())
        else:
            bot.send_message(message.chat.id, "‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.", reply_markup=main_menu())

    @bot.message_handler(func=lambda msg: msg.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
    def help_command(message):
        text = (
            "üìå –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ –ø–æ —Å–∏—Å—Ç–µ–º–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã—Ö –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π.\n\n"
            "–ö–∞–∂–¥–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã:\n"
            "‚è± –ß–µ—Ä–µ–∑: 1 –º–∏–Ω, 5 –º–∏–Ω, 20 –º–∏–Ω, 1 —á–∞—Å, 3 —á–∞—Å–∞, 6 —á–∞—Å–æ–≤, 12 —á–∞—Å–æ–≤, "
            "1 –¥–µ–Ω—å, 3 –¥–Ω—è, 7 –¥–Ω–µ–π, 14 –¥–Ω–µ–π, 30 –¥–Ω–µ–π, 90 –¥–Ω–µ–π, 180 –¥–Ω–µ–π, 360 –¥–Ω–µ–π.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏:\n"
            "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ\n"
            "üìã –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞\n"
            "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å ‚Äî —É–∑–Ω–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
            "‚ÑπÔ∏è –ü–æ–º–æ—â—å ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
            "–ö–æ–º–∞–Ω–¥–∞ /cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞"
        )
        bot.send_message(message.chat.id, text, reply_markup=main_menu())

    @bot.message_handler(func=lambda msg: msg.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ")
    def add_word_step1(message):
        user_temp_data[message.chat.id] = {}
        bot.send_message(message.chat.id, "‚úçÔ∏è –í–≤–µ–¥–∏ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /cancel —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å:")
        bot.register_next_step_handler(message, add_word_step2)

    def add_word_step2(message):
        if message.text == "/cancel":
            cancel(message)
            return
        user_temp_data[message.chat.id]["english"] = message.text.strip()
        bot.send_message(message.chat.id, "‚úçÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /cancel —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å:")
        bot.register_next_step_handler(message, add_word_step3)

    def add_word_step3(message):
        if message.text == "/cancel":
            cancel(message)
            return
        user_temp_data[message.chat.id]["russian"] = message.text.strip()
        english = user_temp_data[message.chat.id]["english"]
        russian = user_temp_data[message.chat.id]["russian"]

        bot.send_message(
            message.chat.id,
            f"üìå –°–ª–æ–≤–æ:\n–ê–Ω–≥–ª–∏–π—Å–∫–∏–π: {english}\n–†—É—Å—Å–∫–∏–π: {russian}\n\n–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—à—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ?",
            reply_markup=confirmation_markup()
        )

    @bot.message_handler(func=lambda msg: msg.text in ["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"])
    def confirm_word(message):
        if message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
            english = user_temp_data[message.chat.id]["english"]
            russian = user_temp_data[message.chat.id]["russian"]
            add_word_to_db(message.chat.id, english, russian)
            schedule_reminders(bot, message.chat.id, english, russian)
            bot.send_message(message.chat.id, f"‚úÖ –°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ:\n{english} ‚Äî {russian}", reply_markup=main_menu())
        else:
            bot.send_message(message.chat.id, "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu())

        user_temp_data.pop(message.chat.id, None)

    @bot.message_handler(func=lambda msg: msg.text == "üìã –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤")
    def list_words(message):
        words = get_words_from_db(message.chat.id)
        if not words:
            bot.send_message(message.chat.id, "üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ–≤.", reply_markup=main_menu())
            return
        text = "üìã –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤:\n\n"
        for english, russian in words:
            text += f"üîπ {english} ‚Äî {russian}\n"
        bot.send_message(message.chat.id, text, reply_markup=main_menu())

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥...")
    bot.infinity_polling()


if __name__ == '__main__':
    init_db()
    main()
